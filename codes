rd .git /S/Q    # remome prasant (.git) file
git init
git add .
git commit -m "message"
git remote add origin URL
git push -u origin master

or push an existing repository from the command line

git remote add origin Url
git push -u origin master

git remote show origin
remote set-url origin https://github.com/wsmr/Ionic_app_3.git

(git remote set-url origin git://github.com/wsmr/Ionic_app_3.git)

git branch


git config --global user.name "YOUR_USERNAME"
git config --global user.name

git config --global user.email "your_email_address@example.com"
git config --global user.email

$ ssh-keygen
// Permission denied (publickey) || Git push origin master Error solved
/** https://www.youtube.com/watch?v=I03YCDBoCrU **/
/** Goto default .ssh file and import it to git SSH key **/

git stash
git stash --help
/** temporarily shelves (or stashes) changes you've made to your working copy so 
you can work on something else, and then come back and re-apply them later on 
**/


/** To push code changes from the main branch to another branch named "branch_name" without pushing to main -> use git's cherry-pick command **/
$ git add .
  -> [main <commit-hash>] 
$ git status
$ git commit -m "commit"
$ git branch -r
  -> check exists remotely branchs
$ git checkout branch_name
  -> if needed to put to new branch $ git checkout -b branch_name  # Create new branch and switch to it
$ git cherry-pick <commit-hash>
  (all conflicts fixed: run "git cherry-pick --continue")
  (use "git cherry-pick --skip" to skip this patch)
  (use "git cherry-pick --abort" to cancel the cherry-pick operation)

$ git push -u origin branch_name
$ git checkout -
$ git pull


/** pull your local project code into a new GitHub repository **/

Initialize the local directory as a Git repository if you haven't already:
$ git init

Add the remote GitHub repository as a remote called "origin":
$ git remote add origin https://github.com/<your-username>/<repo-name>.git

Add all your project files to the staging area:
$ git add .

Commit the files with an initial commit message:
$ git commit -m "Initial commit"

Push your code to the remote repository on GitHub:
$ git push -u origin main
  -> if  ! [rejected]        main -> main (fetch first)
(because the remote GitHub repository already has commits that your local repository doesn't have)

  The hint says you should pull the changes from GitHub first before pushing:
  $ git pull origin main

  After that push your local commits up to GitHub:
  $ git push origin main
      -> if   ! [rejected]        main -> main (non-fast-forward)
     * branch            main       -> FETCH_HEAD
     * [new branch]      main       -> origin/main
    (Git is still detecting that you have divergent branches between your local and remote repositories)
    you need to explicitly configure how you want Git to reconcile the differences when pulling.
    The main options are:
    --rebase - Rebase your local changes on top of the updated remote branch. This replays your commits after fetching.
    --merge - Merge the remote changes into your local branch. This creates a merge commit.
    --ff-only - Only allow fast-forward updates where your local branch has no additional commits

    fetch the remote changes, then replay your local commits on top. This avoids any merge commits.
    $ git pull --rebase origin main

    Once the rebase completes cleanly, you should then be able to push your local branch to the remote:
    $ git push origin main

